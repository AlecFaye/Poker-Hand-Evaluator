fourOfAKindCheck: id
	"Checks for four of a kind"

	| hand rank comboExists card combo |

	"Initializes and declares a dictionary to store the rank"
	rank := Dictionary new.
	0 to: 12 do: [ :i | rank at: (i asString asSymbol) put: 0 ].

	comboExists := false.
	combo := #().

	id = 1
		ifTrue:  [ hand := playerOneHand ]
		ifFalse: [ hand := playerTwoHand ].

	"Populates the dictionary based on card value"
	1 to: handSize do: [ :i |
		card := (((hand at: i) % 13) asString asSymbol) .
		rank at: card put: ((rank at: card) + 1) ].

	"Finds a four of a kind between 2 and Queen"
	2 to: 12 do: [ :value |
		((rank at: (value asString asSymbol)) = 4)
			ifTrue: [ combo := { (value asString , 'C') . (value asString , 'D') . (value asString , 'H') . (value asString , 'S') } . comboExists := true ]
	].

	"Finds a four of a kind for King"
	((rank at: (0 asString asSymbol)) = 4)
		ifTrue: [ combo := #('13C' '13D' '13H' '13S') . comboExists := true ].

	"Finds a four of a kind for Ace"
	((rank at: (1 asString asSymbol)) = 4)
		ifTrue: [ combo := #('1C' '1D' '1H' '1S') . comboExists := true ].

	"If there is a combo, set the according combo"
	comboExists
		ifTrue: [ id = 1
			ifTrue:  [ firstCombo  := combo ]
			ifFalse: [ secondCombo := combo ] . ^ true ].

	^ false.
